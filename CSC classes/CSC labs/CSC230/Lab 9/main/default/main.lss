
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800200  00000414  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000040  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000081  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000006e1  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000273  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000047d  00000000  00000000  00000f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000138  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000207  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000176f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e1       	ldi	r30, 0x14	; 20
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 37       	cpi	r26, 0x76	; 118
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
 112:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <lcd_nibble>:

uint8_t lcd_pos = LCD_LINE1;


static void lcd_nibble( uint8_t d )
{
 11a:	98 2f       	mov	r25, r24
  LCD_D7 = 0; if( d & 1<<7 ) LCD_D7 = 1;
 11c:	80 91 02 01 	lds	r24, 0x0102
 120:	8f 7e       	andi	r24, 0xEF	; 239
 122:	80 93 02 01 	sts	0x0102, r24
 126:	97 ff       	sbrs	r25, 7
 128:	05 c0       	rjmp	.+10     	; 0x134 <lcd_nibble+0x1a>
 12a:	80 91 02 01 	lds	r24, 0x0102
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 93 02 01 	sts	0x0102, r24
  LCD_D6 = 0; if( d & 1<<6 ) LCD_D6 = 1;
 134:	80 91 02 01 	lds	r24, 0x0102
 138:	87 7f       	andi	r24, 0xF7	; 247
 13a:	80 93 02 01 	sts	0x0102, r24
 13e:	96 ff       	sbrs	r25, 6
 140:	05 c0       	rjmp	.+10     	; 0x14c <lcd_nibble+0x32>
 142:	80 91 02 01 	lds	r24, 0x0102
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 93 02 01 	sts	0x0102, r24
  LCD_D5 = 0; if( d & 1<<5 ) LCD_D5 = 1;
 14c:	73 98       	cbi	0x0e, 3	; 14
 14e:	95 fd       	sbrc	r25, 5
 150:	73 9a       	sbi	0x0e, 3	; 14
  LCD_D4 = 0; if( d & 1<<4 ) LCD_D4 = 1;
 152:	a5 98       	cbi	0x14, 5	; 20
 154:	94 fd       	sbrc	r25, 4
 156:	a5 9a       	sbi	0x14, 5	; 20
  LCD_E0 = 1;
 158:	80 91 02 01 	lds	r24, 0x0102
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	80 93 02 01 	sts	0x0102, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_nibble+0x4a>
  _delay_us( LCD_TIME_ENA );
  LCD_E0 = 0;
 168:	80 91 02 01 	lds	r24, 0x0102
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	80 93 02 01 	sts	0x0102, r24
}
 172:	08 95       	ret

00000174 <lcd_byte>:


static void lcd_byte( uint8_t d )
{
 174:	1f 93       	push	r17
 176:	18 2f       	mov	r17, r24
  lcd_nibble( d );
 178:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
  lcd_nibble( d<<4 );
 17c:	81 2f       	mov	r24, r17
 17e:	82 95       	swap	r24
 180:	80 7f       	andi	r24, 0xF0	; 240
 182:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 186:	88 ec       	ldi	r24, 0xC8	; 200
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_byte+0x16>
  _delay_us( LCD_TIME_DAT );
}
 18e:	1f 91       	pop	r17
 190:	08 95       	ret

00000192 <lcd_command>:


void lcd_command( uint8_t d )
{
 192:	1f 93       	push	r17
 194:	18 2f       	mov	r17, r24
  LCD_RS = 0;
 196:	80 91 02 01 	lds	r24, 0x0102
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	80 93 02 01 	sts	0x0102, r24
  lcd_byte( d );
 1a0:	81 2f       	mov	r24, r17
 1a2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_byte>
  switch( d ){
 1a6:	14 30       	cpi	r17, 0x04	; 4
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <lcd_command+0x1e>
 1aa:	10 38       	cpi	r17, 0x80	; 128
 1ac:	40 f0       	brcs	.+16     	; 0x1be <lcd_command+0x2c>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <lcd_command+0x28>
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	9f e1       	ldi	r25, 0x1F	; 31
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_command+0x22>
 1b8:	10 e8       	ldi	r17, 0x80	; 128
    case 0 ... 3:                       // on longer commands
      _delay_us( LCD_TIME_CLR );
      d = LCD_LINE1;
    case 0x80 ... 0xFF:                 // set position
      lcd_pos = d;
 1ba:	10 93 00 02 	sts	0x0200, r17
  }
}
 1be:	1f 91       	pop	r17
 1c0:	08 95       	ret

000001c2 <lcd_putchar>:


void lcd_putchar( uint8_t d )
{
  LCD_RS = 1;
 1c2:	90 91 02 01 	lds	r25, 0x0102
 1c6:	90 62       	ori	r25, 0x20	; 32
 1c8:	90 93 02 01 	sts	0x0102, r25
  lcd_byte( d );
 1cc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_byte>
  switch( ++lcd_pos ){
 1d0:	80 91 00 02 	lds	r24, 0x0200
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 00 02 	sts	0x0200, r24
 1da:	80 39       	cpi	r24, 0x90	; 144
 1dc:	21 f0       	breq	.+8      	; 0x1e6 <lcd_putchar+0x24>
 1de:	80 3d       	cpi	r24, 0xD0	; 208
 1e0:	29 f4       	brne	.+10     	; 0x1ec <lcd_putchar+0x2a>
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	01 c0       	rjmp	.+2      	; 0x1e8 <lcd_putchar+0x26>
 1e6:	80 ec       	ldi	r24, 0xC0	; 192
      d = LCD_LINE1;
      break;
    default: 
      return;
  }
  lcd_command( d );
 1e8:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
 1ec:	08 95       	ret

000001ee <lcd_puts>:
}


void lcd_puts( void *s )                        // display string from SRAM
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
 1f2:	ec 01       	movw	r28, r24
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <lcd_puts+0xe>
    lcd_putchar( *s1 );
 1f6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_putchar>
}


void lcd_puts( void *s )                        // display string from SRAM
{
  for( uint8_t *s1 = s; *s1; s1++ )             // until zero byte
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	88 81       	ld	r24, Y
 1fe:	88 23       	and	r24, r24
 200:	d1 f7       	brne	.-12     	; 0x1f6 <lcd_puts+0x8>
    lcd_putchar( *s1 );
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <lcd_blank>:


void lcd_blank( uint8_t len )                   // blank n digits
{
 208:	1f 93       	push	r17
 20a:	18 2f       	mov	r17, r24
 20c:	04 c0       	rjmp	.+8      	; 0x216 <lcd_blank+0xe>
  while( len-- )
    lcd_putchar( ' ' );
 20e:	80 e2       	ldi	r24, 0x20	; 32
 210:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_putchar>
 214:	11 50       	subi	r17, 0x01	; 1
}


void lcd_blank( uint8_t len )                   // blank n digits
{
  while( len-- )
 216:	11 23       	and	r17, r17
 218:	d1 f7       	brne	.-12     	; 0x20e <lcd_blank+0x6>
    lcd_putchar( ' ' );
}
 21a:	1f 91       	pop	r17
 21c:	08 95       	ret

0000021e <lcd_init>:


void lcd_init( void )
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
  LCD_DDR_D4 = 1;                               // enable output pins
 222:	9d 9a       	sbi	0x13, 5	; 19
  LCD_DDR_D5 = 1;
 224:	6b 9a       	sbi	0x0d, 3	; 13
  LCD_DDR_D6 = 1;
 226:	e1 e0       	ldi	r30, 0x01	; 1
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	80 81       	ld	r24, Z
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	80 83       	st	Z, r24
  LCD_DDR_D7 = 1;
 230:	80 81       	ld	r24, Z
 232:	80 61       	ori	r24, 0x10	; 16
 234:	80 83       	st	Z, r24
  LCD_DDR_RS = 1;
 236:	80 81       	ld	r24, Z
 238:	80 62       	ori	r24, 0x20	; 32
 23a:	80 83       	st	Z, r24
  LCD_DDR_E0 = 1;
 23c:	80 81       	ld	r24, Z
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	80 83       	st	Z, r24
  LCD_E0 = 0;
 242:	e2 e0       	ldi	r30, 0x02	; 2
 244:	f1 e0       	ldi	r31, 0x01	; 1
 246:	80 81       	ld	r24, Z
 248:	8f 7b       	andi	r24, 0xBF	; 191
 24a:	80 83       	st	Z, r24
  LCD_RS = 0;                                   // send commands
 24c:	80 81       	ld	r24, Z
 24e:	8f 7d       	andi	r24, 0xDF	; 223
 250:	80 83       	st	Z, r24
 252:	80 e6       	ldi	r24, 0x60	; 96
 254:	9a ee       	ldi	r25, 0xEA	; 234
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x38>

  _delay_ms( 15 );
  lcd_nibble( 0x30 );
 25a:	80 e3       	ldi	r24, 0x30	; 48
 25c:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
 260:	80 e1       	ldi	r24, 0x10	; 16
 262:	90 e4       	ldi	r25, 0x40	; 64
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x46>
  _delay_ms( 4.1 );
  lcd_nibble( 0x30 );
 268:	80 e3       	ldi	r24, 0x30	; 48
 26a:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
 26e:	80 e9       	ldi	r24, 0x90	; 144
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x54>
  _delay_us( 100 );
  lcd_nibble( 0x30 );
 276:	80 e3       	ldi	r24, 0x30	; 48
 278:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
 27c:	08 ec       	ldi	r16, 0xC8	; 200
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	c8 01       	movw	r24, r16
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x64>
  _delay_us( LCD_TIME_DAT );
  lcd_nibble( 0x20 );                           // 4 bit mode
 286:	80 e2       	ldi	r24, 0x20	; 32
 288:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_nibble>
 28c:	c8 01       	movw	r24, r16
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init+0x70>
  _delay_us( LCD_TIME_DAT );
#if LCD_LINE == 1
  lcd_command( 0x20 );                          // 1 line
#else
  lcd_command( 0x28 );                          // 2 lines 5*7
 292:	88 e2       	ldi	r24, 0x28	; 40
 294:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
#endif
  lcd_command( 0x08 );                          // display off
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
  lcd_command( 0x01 );                          // display clear
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
  lcd_command( 0x06 );                          // cursor increment
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
  lcd_command( 0x0C );                          // on, no cursor, no blink
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
}
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <main>:
// These are included by the LCD driver code, so 
// we don't need to include them here.
// #include <avr/io.h>
// #include <util/delay.h>
int main( void )
{
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	ca 57       	subi	r28, 0x7A	; 122
 2bc:	d0 40       	sbci	r29, 0x00	; 0
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 2c2:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_init>
	*/
	for (;;){
	
	lcd_xy(0,0);

	char msg[100] = "University of Vi";
 2c6:	8e 01       	movw	r16, r28
 2c8:	09 5e       	subi	r16, 0xE9	; 233
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	33 e5       	ldi	r19, 0x53	; 83
 2ce:	73 2e       	mov	r7, r19
 2d0:	28 e2       	ldi	r18, 0x28	; 40
 2d2:	82 2e       	mov	r8, r18
 2d4:	91 2c       	mov	r9, r1
 2d6:	8c 0e       	add	r8, r28
 2d8:	9d 1e       	adc	r9, r29
	lcd_puts(msg);

	lcd_xy(0,1);
	int n = strlen(msg);
	char len[5];
	itoa(n, len, 10); //Convert int to string
 2da:	5e 01       	movw	r10, r28
 2dc:	08 94       	sec
 2de:	a1 1c       	adc	r10, r1
 2e0:	b1 1c       	adc	r11, r1
 2e2:	90 e9       	ldi	r25, 0x90	; 144
 2e4:	c9 2e       	mov	r12, r25
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	d9 2e       	mov	r13, r25
	lcd_puts(len);

	_delay_ms(500);
	char blank[17] = "                ";	//Blank message to make blink
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	e8 2e       	mov	r14, r24
 2ee:	f1 2c       	mov	r15, r1
 2f0:	ec 0e       	add	r14, r28
 2f2:	fd 1e       	adc	r15, r29

	/*TO DO: show a string on the first line, then show the number of characters of that string on the second line. Let them blink for 0.5 second. 
	*/
	for (;;){
	
	lcd_xy(0,0);
 2f4:	80 e8       	ldi	r24, 0x80	; 128
 2f6:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>

	char msg[100] = "University of Vi";
 2fa:	d8 01       	movw	r26, r16
 2fc:	e1 e0       	ldi	r30, 0x01	; 1
 2fe:	f2 e0       	ldi	r31, 0x02	; 2
 300:	81 e1       	ldi	r24, 0x11	; 17
 302:	01 90       	ld	r0, Z+
 304:	0d 92       	st	X+, r0
 306:	81 50       	subi	r24, 0x01	; 1
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x4c>
 30a:	f4 01       	movw	r30, r8
 30c:	87 2d       	mov	r24, r7
 30e:	11 92       	st	Z+, r1
 310:	8a 95       	dec	r24
 312:	e9 f7       	brne	.-6      	; 0x30e <main+0x58>

	lcd_puts(msg);
 314:	c8 01       	movw	r24, r16
 316:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>

	lcd_xy(0,1);
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
	int n = strlen(msg);
 320:	f8 01       	movw	r30, r16
 322:	01 90       	ld	r0, Z+
 324:	00 20       	and	r0, r0
 326:	e9 f7       	brne	.-6      	; 0x322 <main+0x6c>
 328:	31 97       	sbiw	r30, 0x01	; 1
	char len[5];
	itoa(n, len, 10); //Convert int to string
 32a:	cf 01       	movw	r24, r30
 32c:	80 1b       	sub	r24, r16
 32e:	91 0b       	sbc	r25, r17
 330:	b5 01       	movw	r22, r10
 332:	4a e0       	ldi	r20, 0x0A	; 10
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	0e 94 c3 01 	call	0x386	; 0x386 <itoa>
	lcd_puts(len);
 33a:	c5 01       	movw	r24, r10
 33c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
 340:	88 e8       	ldi	r24, 0x88	; 136
 342:	93 e1       	ldi	r25, 0x13	; 19
 344:	f6 01       	movw	r30, r12
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <main+0x90>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 34a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 34c:	d9 f7       	brne	.-10     	; 0x344 <main+0x8e>

	_delay_ms(500);
	char blank[17] = "                ";	//Blank message to make blink
 34e:	d7 01       	movw	r26, r14
 350:	e5 e6       	ldi	r30, 0x65	; 101
 352:	f2 e0       	ldi	r31, 0x02	; 2
 354:	81 e1       	ldi	r24, 0x11	; 17
 356:	01 90       	ld	r0, Z+
 358:	0d 92       	st	X+, r0
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	e1 f7       	brne	.-8      	; 0x356 <main+0xa0>

	lcd_xy(0,0);
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
	lcd_puts(blank);
 364:	c7 01       	movw	r24, r14
 366:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>

	lcd_xy(0,1);
 36a:	80 ec       	ldi	r24, 0xC0	; 192
 36c:	0e 94 c9 00 	call	0x192	; 0x192 <lcd_command>
	lcd_puts(blank);
 370:	c7 01       	movw	r24, r14
 372:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_puts>
 376:	88 e8       	ldi	r24, 0x88	; 136
 378:	93 e1       	ldi	r25, 0x13	; 19
 37a:	f6 01       	movw	r30, r12
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <main+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 380:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 382:	d9 f7       	brne	.-10     	; 0x37a <main+0xc4>
 384:	b7 cf       	rjmp	.-146    	; 0x2f4 <main+0x3e>

00000386 <itoa>:
 386:	fb 01       	movw	r30, r22
 388:	9f 01       	movw	r18, r30
 38a:	e8 94       	clt
 38c:	42 30       	cpi	r20, 0x02	; 2
 38e:	c4 f0       	brlt	.+48     	; 0x3c0 <itoa+0x3a>
 390:	45 32       	cpi	r20, 0x25	; 37
 392:	b4 f4       	brge	.+44     	; 0x3c0 <itoa+0x3a>
 394:	4a 30       	cpi	r20, 0x0A	; 10
 396:	29 f4       	brne	.+10     	; 0x3a2 <itoa+0x1c>
 398:	97 fb       	bst	r25, 7
 39a:	1e f4       	brtc	.+6      	; 0x3a2 <itoa+0x1c>
 39c:	90 95       	com	r25
 39e:	81 95       	neg	r24
 3a0:	9f 4f       	sbci	r25, 0xFF	; 255
 3a2:	64 2f       	mov	r22, r20
 3a4:	77 27       	eor	r23, r23
 3a6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__udivmodhi4>
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	8a 33       	cpi	r24, 0x3A	; 58
 3ae:	0c f0       	brlt	.+2      	; 0x3b2 <itoa+0x2c>
 3b0:	89 5d       	subi	r24, 0xD9	; 217
 3b2:	81 93       	st	Z+, r24
 3b4:	cb 01       	movw	r24, r22
 3b6:	00 97       	sbiw	r24, 0x00	; 0
 3b8:	a1 f7       	brne	.-24     	; 0x3a2 <itoa+0x1c>
 3ba:	16 f4       	brtc	.+4      	; 0x3c0 <itoa+0x3a>
 3bc:	5d e2       	ldi	r21, 0x2D	; 45
 3be:	51 93       	st	Z+, r21
 3c0:	10 82       	st	Z, r1
 3c2:	c9 01       	movw	r24, r18
 3c4:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <strrev>

000003c8 <strrev>:
 3c8:	dc 01       	movw	r26, r24
 3ca:	fc 01       	movw	r30, r24
 3cc:	67 2f       	mov	r22, r23
 3ce:	71 91       	ld	r23, Z+
 3d0:	77 23       	and	r23, r23
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <strrev+0x4>
 3d4:	32 97       	sbiw	r30, 0x02	; 2
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <strrev+0x18>
 3d8:	7c 91       	ld	r23, X
 3da:	6d 93       	st	X+, r22
 3dc:	70 83       	st	Z, r23
 3de:	62 91       	ld	r22, -Z
 3e0:	ae 17       	cp	r26, r30
 3e2:	bf 07       	cpc	r27, r31
 3e4:	c8 f3       	brcs	.-14     	; 0x3d8 <strrev+0x10>
 3e6:	08 95       	ret

000003e8 <__udivmodhi4>:
 3e8:	aa 1b       	sub	r26, r26
 3ea:	bb 1b       	sub	r27, r27
 3ec:	51 e1       	ldi	r21, 0x11	; 17
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__udivmodhi4_ep>

000003f0 <__udivmodhi4_loop>:
 3f0:	aa 1f       	adc	r26, r26
 3f2:	bb 1f       	adc	r27, r27
 3f4:	a6 17       	cp	r26, r22
 3f6:	b7 07       	cpc	r27, r23
 3f8:	10 f0       	brcs	.+4      	; 0x3fe <__udivmodhi4_ep>
 3fa:	a6 1b       	sub	r26, r22
 3fc:	b7 0b       	sbc	r27, r23

000003fe <__udivmodhi4_ep>:
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	5a 95       	dec	r21
 404:	a9 f7       	brne	.-22     	; 0x3f0 <__udivmodhi4_loop>
 406:	80 95       	com	r24
 408:	90 95       	com	r25
 40a:	bc 01       	movw	r22, r24
 40c:	cd 01       	movw	r24, r26
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
